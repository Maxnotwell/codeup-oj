#include <iostream>
#include <string>
using namespace std;
typedef struct LNode {
	int data;
	struct LNode *next;
}LNode, *LList;
void show(LList &L) {
	if (L->next == NULL) {
		cout << "Link list is empty" << endl;
		return;
	}
	LList p = L->next;
	cout << p->data;
	p = p->next;
	while (p) {
			cout << ' ' << p->data;
			p = p->next;
	}
	cout << endl;
	return;
}
void get(LList &L, int pos) {
	LList p;
	p = L;
	for (int i = 0; i < pos; ++i) 
		p = p->next;
	if (p) {
		cout << p->data << endl;
		return;
	}
	cout << "get fail" << endl;
	return;
}
void insert(LList &L, int pos, int e) {
	if (pos < 0) {
		cout << "insert fail" << endl;
		return;
	}
	LList p = new LNode;
	p->data = e;
	p->next = NULL;
	LList pre = L;
	for (int i = 0; i < pos - 1; ++i)
		pre = pre->next;
	if (!pre) {
		cout << "insert fail" << endl;
		return;
	}
	p->next = pre->next;
	pre->next = p;
	cout << "insert OK" << endl;
	return;
}
void del(LList &L, int pos) {
	if (!L->next) {
		cout << "delete fail" << endl;
		return;
	}
	LList pre, p;
	pre = L;
	p = L;
	for (int i = 0; i < pos; ++i) {
		pre = p;
		p = p->next;
	}
	if (p) {
		pre->next = p->next;
		free(p);
		cout << "delete OK" << endl;
		return;
	}
	cout << "delete fail" << endl;
	return;
}
int main() {
	int n, m;
	LList L = new LNode;
	L->next = NULL;
	cin >> n;
	while (n--) {
		LList n = new LNode;
		n->next = L->next;
		L->next = n;
		cin >> n->data;
	}
	cin >> m;
	while (m--) {
		int e, pos;
		string str;
		cin >> str;
		if (str == "get") {
			cin >> pos;
			get(L, pos);
		}
		else if (str == "insert") {
			cin >> pos >> e;
			insert(L, pos, e);
		}
		else if (str == "delete") {
			cin >> pos;
			del(L, pos);
		}
		else if (str == "show") {
			show(L);
		}
	}
	return 0;
}